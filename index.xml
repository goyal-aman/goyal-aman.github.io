<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Aman Goyal</title><link>https://goyal-aman.github.io/</link><description>Recent content in Home on Aman Goyal</description><generator>Hugo</generator><language>en-US</language><copyright>Copyright © 2025, Aman Goyal.</copyright><lastBuildDate>Wed, 26 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://goyal-aman.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>DocumentDB Load Balancing: A Key Learning from Our Load Testing</title><link>https://goyal-aman.github.io/documentdb-load-balancing-a-key-learning-from-our-load-testing/</link><pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate><guid>https://goyal-aman.github.io/documentdb-load-balancing-a-key-learning-from-our-load-testing/</guid><description>&lt;hr>
&lt;h1 id="tldr">TLDR;&lt;/h1>
&lt;p>API Gateway can provide caching, logging auth and load balancer distributes traffic between 2 or more servers for high-availability and horizontal scaling.&lt;/p>
&lt;p>Both load balancer and Api gateways are used between web clients and web servers. But they have served different purpose, that is to say, they are not interchangeable.&lt;/p>
&lt;h1 id="load-balancers">Load Balancers&lt;/h1>
&lt;p>Core function of load balancer is to distribute traffic. They receive traffic from web client’s and distribute them between 2 or more web servers.&lt;/p></description></item><item><title>Distributed Locks - Naive</title><link>https://goyal-aman.github.io/distributed-locks-naive/</link><pubDate>Mon, 30 Dec 2024 00:00:00 +0000</pubDate><guid>https://goyal-aman.github.io/distributed-locks-naive/</guid><description>&lt;hr>
&lt;p>Locks are used by processes to acquire exclusive access to resource which are shared among many processes. Exclusive access is required to prevent race conditions which hard debug and nightmare to detect.&lt;/p>
&lt;p>Imagine scenario of an admin is updating an email group by uploading a file. The process works like this:&lt;/p>
&lt;p>All existing users in the group are removed.
New users listed in the file are added in batches (e.g., 10,000 at a time).
Seems straightforward, right? But now, consider what happens if another file is uploaded while the first one is still being processed.&lt;/p></description></item><item><title>Understanding OLAP and OLTP</title><link>https://goyal-aman.github.io/understanding-olap-and-oltp/</link><pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate><guid>https://goyal-aman.github.io/understanding-olap-and-oltp/</guid><description>&lt;hr>
&lt;h1 id="tldr">TLDR;&lt;/h1>
&lt;p>Any database falls into one of two category OLAP or OLTP — depending on the access pattern for which it is optimised&lt;/p>
&lt;h1 id="key-differences-olap-vs-oltp">Key differences: OLAP vs. OLTP&lt;/h1>
&lt;p>The primary purpose of online analytical processing (OLAP) is to analyse aggregated data, while the primary purpose of online transaction processing (OLTP) is to process database transactions.&lt;/p>
&lt;p>You use OLAP systems to generate reports, perform complex data analysis, and identify trends. In contrast, you use OLTP systems to process orders, update inventory, and manage customer accounts.&lt;/p></description></item><item><title>Load Balancer vs. API Gateway: Understanding the Differences</title><link>https://goyal-aman.github.io/load-balancer-vs.-api-gateway-understanding-the-differences/</link><pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate><guid>https://goyal-aman.github.io/load-balancer-vs.-api-gateway-understanding-the-differences/</guid><description>&lt;hr>
&lt;h1 id="tldr">TLDR;&lt;/h1>
&lt;p>API Gateway can provide caching, logging auth and load balancer distributes traffic between 2 or more servers for high-availability and horizontal scaling.&lt;/p>
&lt;p>Both load balancer and Api gateways are used between web clients and web servers. But they have served different purpose, that is to say, they are not interchangeable.&lt;/p>
&lt;h1 id="load-balancers">Load Balancers&lt;/h1>
&lt;p>&lt;img src="https://goyal-aman.github.io/images/load_balancer.png" alt="load-balancer">
Core function of load balancer is to distribute traffic. They receive traffic from web client’s and distribute them between 2 or more web servers.&lt;/p></description></item><item><title>Storing Values within Index</title><link>https://goyal-aman.github.io/storing-values-within-index/</link><pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate><guid>https://goyal-aman.github.io/storing-values-within-index/</guid><description>&lt;hr>
&lt;p>Relational databases can have one primary index and any number of secondary indexes. When queries uses indexes they use keys in the index to find values. There are two ways to have values&lt;/p>
&lt;ul>
&lt;li>Store actual row in index&lt;/li>
&lt;li>Store reference to rows in index&lt;/li>
&lt;/ul>
&lt;p>Storing references to rows in index is a good when there are any secondary indexes. In this way when a value needs to be updated in row, it can be updated in one place and all the indexes can refer to that one value. Also transactional guarantees are easy to implement in this case. However, challenges may arrive when size of updated row is much larger then original row size that it cannot fit in its current heap location, in which case, row need to move to new location in heap. This requires either updating references in all secondary indexes to new location or leaving a forwarding pointer behind. In normal cases, however, hopping from indexes to heap for reads is too much of performance penalty.&lt;/p></description></item></channel></rss>