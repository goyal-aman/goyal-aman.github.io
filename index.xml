<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Aman Goyal</title><link>https://goyal-aman.github.io/</link><description>Recent content in Home on Aman Goyal</description><generator>Hugo</generator><language>en-US</language><copyright>Copyright Â© 2025, Aman Goyal.</copyright><lastBuildDate>Wed, 26 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://goyal-aman.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>DocumentDB Load Balancing: A Key Learning from Our Load Testing</title><link>https://goyal-aman.github.io/documentdb-load-balancing-a-key-learning-from-our-load-testing/</link><pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate><guid>https://goyal-aman.github.io/documentdb-load-balancing-a-key-learning-from-our-load-testing/</guid><description>&lt;hr>
&lt;h1 id="tldr">TL;DR&lt;/h1>
&lt;p>Amazon DocumentDB load-balances traffic at the TCP connection level rather than at the request level. This can lead to unexpected resource distribution issues, particularly when scaling read replicas under high load. The solution? Restarting application pods to establish new TCP connections that are evenly distributed across replicas.&lt;/p>
&lt;h1 id="understanding-the-load-balancing-issue">Understanding the Load Balancing Issue&lt;/h1>
&lt;p>In a typical Amazon DocumentDB cluster, there is a primary node that handles all write operations and one or more read replicas to distribute read traffic. During our load testing, we observed that a single read replica was hitting over 90% CPU utilization due to high read requests.&lt;/p></description></item></channel></rss>